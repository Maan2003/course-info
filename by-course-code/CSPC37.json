{"course code":"CSPC37","course title":"Automata Theory","number of credits":"4","prerequisites":"MAIR13","course type":"PC","branch":"cs","course learning objectives":"The objective of this course is to give students a clear understanding of concepts formal languages, grammars and formal methods of computation.","course content":"- Introduction to Finite State Machine, Moore and Mealy FSMs, Equivalence, Regular Languages, Regular expressions, The memory required to recognize a language, Distinguishing one string from another, unions, Intersections and Complements, Finite automata, NFA, NFA with null transitions, Equivalence, Criterion for Regularity, Minimal Finite Automata, The pumping lemma, decision problems, Finite automata, Non-determinism and Kleen’s Theorem, Regular and Non-regular languages.n- Context – Free Grammars, Definition of CFG, example of familiar languages, unions, concatenations and closures of CFLs, Derivation Tree, Ambiguity, unambiguous CFG for algebraic expressions, Simplified forms and normal forms, Push down automata, definition, deterministic PDA, PDA to CFG and Vice Versa, Context Free and Non Context Free Languages, Pumping lemma for CFG, Intersection and complements of CFL.n- Turing Machine Definition, Turing Machining as Language acceptors, combining TM, computing Partial Function with TM. Recursively Enumerable and Recursive Languages, Regular Grammars, context Sensitive grammars, Chomsky Hierarchy. Concept of insolvability & reducibility, Halting Problem, Post correspondence Problem, Rice theorem, P and NP. Polynomial-Time reductions and NP-Completeness.","reference books":"- John C. Martin: Introduction to Languages and the Theory of Computation, MGH.n- Lewis & Papadimitriou: Elements of the Theory of Computation, PHI.n- Daniel I.A. Cohen: Introduction to Computer Theory: John Wiley.n- J.E. Hopcroft and J.D. Ullman: Introduction to Automata Theory Languages and Computation, Narosa.","course outcomes":"- To understand the foundations finite automata (deterministic or non-deterministic), FSM and master regular languages.n- Be exposed to types of languages (type-0, type-1, type-2, type-3), context-free languages (type-2) and using pushdown automata (PDA) as its acceptor.n- To design the Turing machines for various mathematical function, string function etcn- To demonstrate concept of decidability, unsolvability and recursive.nProgramme Electives – III and IV"}
