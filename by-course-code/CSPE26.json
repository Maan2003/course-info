{"course code":"CSPE26","course title":"Efficient Coding for Problem Solving and Competitive Programming","number of credits":"4","prerequisites":"CSPC12, CSPC21nGood practice of programming and complexity analysis in Data Structures & Algorithms","course type":"EPR","branch":"cs","course learning objectives":"- Identifying multiple alternate coding solutions of problems discussed in programming tests and Competitive Problems (CP) and developing understanding of their efficiency issues.n- Designing and developing brute-force solutions followed by time/space efficient solutions for CP problems.n- Learning commonly used problem solving approaches and applying them for coding the solutions for new problems.","course content":"- Overview of Efficient Coding for Problem Solving and CP: Introduction to competitive programming (CP); revisit of complexity analysis; introduction to online platforms such as codechef, codeforces etc and online submission; constraints during CP, online testing process and common errors such as TLE; use of STLn- Use of Number Theory for problem-solving: reducing time/space complexity of brute force coding solution of Sieve Method, Inverse Module, Euclidian Method of factorization; efficient coding for Permutation Combination; XORing based and pattern based solutions,n- Coding for Optimizing time and Space using Sequential Storage: two pointer approach; problem- solving using arrays and strings such as rotation on sorted arrays, duplicate removal, string matching algorithms; Kadaneâ€™s algo, stacks, priority-queues and hashing based efficient coding; median based problems and alternate solutions.n- Applying Non-Linear Data Structures for real-life problems: design of efficient solutions for problems such as finding loops in a linked list, memory efficient DLL, block reversal in LL; problem solving using trees and binary trees, Catalan numbers, applications of graphs, spanning tree and path algos for CP problems with reduced time/space complexityn- CP Problem Solving using Advanced Topics: concept of disjoint sets and their efficient representation, algorithmic approaches such as Greedy, Backtracking, Dynamic Programming and applying them for CP problems using bottom-up dynamic programming.nText Books:n- Karumanchi: Data Structures and Algorithms Made Easy, CareerMonk Publications, 2017n- G L McDowell: Cracking the Coding Interviews, CareerCup Publications, 2016n- geekforgeeks.orgn- codechef.com, spoj.com, codeforces.com, interviewbit.com","course outcomes":"- Understanding the issues of online platforms and Competitive Programming (CP) and developing brute force coding for commonly asked CP problemsn- Analyzing the space and time complexity of brute force solutions and designing efficient solutionsn- Evaluating the applicability of suitable algorithmic approaches to solve relevant CP problemsn- Creating efficient solutions of CP problems using the learnt algorithmic approaches"}
