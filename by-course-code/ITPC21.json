{"course code":"ITPC21","course title":"Design and Analysis of Algorithms","number of credits":"4","prerequisites":"ITPC12","course type":"PC1","branch":"it","course learning objectives":"- Able to design, implement and analysis of standard searching and sorting algorithms.n- Implement standard divide and conquer, Dynamic programming, Greedy and backtracking algorithms.n- Able to implement between different data structures i.e., trees, heaps etc. also, able to pick an appropriate data structure for any given design situation.n- Able to implement the major graph algorithms and their analysis.","course content":"- IntroductionnConcept of Time and space complexity, analysis of algorithms, asymptotic notation, recurrence relations, design and analysis of D & C problems like quick sort etc, heap sort, priority queues, sorting in linear time, hashing, binary search trees,nGraph AlgorithmsnGraph representation & traversal (search), topological sort, strongly connected components, minimum spanning trees – Kruskal and Prim’s, Single source shortest paths, relaxation, Dijkstra’s algorithm, Bellman-Ford algorithm, single source shortest paths for directed acyclic graphs, all-pairs shortest path.nB-Trees and Dynamic programmingnB-Trees: representation and operations; Elements of Dynamic Programming, structure and steps, Matrix-chain multiplication, longest common subsequence,nGreedy & Backtracking Approaches:nGreedy algorithms – Elements, activity-selection problem, Huffman codes, task scheduling problem, Knapsack Problem, Backtracking – Elements, 8 – Queens, Graph Coloring, Hamiltonian Cycles.","books":"- Cormen, Leiserson and Rivest: Introduction to Algorithms, 3/e, PHI.n- Horowitz, Sahni, and Rajasekaran: Fundamentals of Computer Algorithms, Second Edition, Universities Press, Hyderabad.n- Aho, Hopcroft, and Ullman: The Design and Analysis of Computer Algorithms, Addison Wesley.","course outcomes":"(CO’s)n- Able to design, implement and analysis of standard searching and sorting algorithms.n- Implement standard divide and conquer, Dynamic programming, Greedy and backtracking algorithms.n- Able to implement between different data structures i.e., trees, heaps etc. also, able to pick an appropriate data structure for any given design situation.n- Able to implement the major graph algorithms and their analysis."}
