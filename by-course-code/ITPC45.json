{"course code":"ITPC45","course title":"Advanced Data Structures and Algorithms","number of credits":"4","prerequisites":"","course type":"PC","branch":"it","course learning objectives":"- To develop the understanding of advanced data structures.n- To develop the understanding of algorithmic design paradigms.","course content":"- Advanced Data StructuresnThreaded binary trees, Binomial heaps, Fibonacci heaps, data structures for disjoint sets, Balanced trees- AVL, red-black treesnString MatchingnString-matching algorithm, Rabin-Karp algorithm, String matching with automata, Knuth-Morris-Pratt algorithm.nNP – Hard & NP – Complete problemsnConcepts of NP-hard & NP complete problems, Clique Decision problem, Node Cover decision problem, Travelling Salesperson decision problem.nAdvanced AlgorithmsnIntroduction to approximation algorithms, absolute approximation, ɛ-approximation, polynomial time approximations, randomized algorithms.nSuggested Books:n- E Horowitz and S. Sahni, Fundamentals of Data Structures, Universities Press.n- Cormen, Leiserson and Rivest, Introduction to Algorithms, 3/e, PHI.n- Horowitz, Ellis and Sahni, Fundamentals of Computer Algorithms, Universities Press..","reference books":"- Oded Goldreich. P, NP, and NP-Completeness: The Basics of Computational Complexity, Cambridge University Press, 2010.n- Anne Benoit, Yves Robert, Frédéric Vivien. A Guide to Algorithm Design: Paradigms, Methods, and Complexity Analysis, Taylor & Francis, 2013.n- A.V. Aho, J.E. Hopcroft, and J.D. Ullman, Data Structures and Algorithms, Addison Wesley, Reading Massachusetts, USA, 1983.n- Donald Knuth. The Art of Computer Programming: Fundamental Algorithms, Third Edition. Addison- Wesley, 1997.n- Donald Knuth. The Art of Computer Programming Volume 3: Sorting and Searching, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89685-0.nCourse Outcome:n- Compare, contrast, and apply the key algorithmic design paradigms: brute force, divide and conquer, decrease and conquer, transform and conquer, greedy, dynamic.n- Compare, contrast, and apply key data structures: trees, lists, stacks, queues, hash tables, and graph representations.n- Compare, contrast, and apply algorithmic tradeoffs: time vs. space, deterministic vs. randomized, and exact vs. approximate.n- Implement, empirically compare, and apply fundamental algorithms and data structures to real-world problems.nProgramme Elective – V"}
