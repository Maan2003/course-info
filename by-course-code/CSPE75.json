{"course code":"CSPE75","course title":"Advanced Computer Architecture","number of credits":"4","prerequisites":"CSPC10, CSPC22","course type":"PE","branch":"cs","course learning objectives":"The objective of this course is to give students a clear understanding of the modern computer architecture. Students will learn the design and analysis of high performance (multi)processors and supporting subsystems from the quantitative aspect.","course content":"- Introduction to Parallel ProcessingnParallelism in uni-processor system, pipelining, basic assumptions, design techniques, designing pipelined data path, propagating an instruction queue through the pipeline, pipeline hazards and their detection, forwarding, instruction level parallelism, super-scalar architecture, general pipeline and reservation tables, principles of linear pipelining, Instruction and arithmetic pipeline, principlesof designing pipelined processor, micro-programming, general approach, micro-code engine, control store, branching and looping, horizontal and vertical micro-code scheme with example, alternative approach to micro-coding.n- Issues in the Architecture of Distributed SystemsnnnIntroduction, Examples, Distributed Systems versus Parallel Systems, Partial Orders, Models of Distributed Systems, Architectural Models, Fundamental Models, Interleaving Model, Happened Before Model, Potential Causality Model, Appropriate Model, Models Based on states, Deposet.nnnProgram correctness, Correctness criteria, Safety and Liveness properties, Correctness proofs, Predicate logic, Assertional reasoning, Well-Founded sets, Predicate Transformers.nnnConcept of Logical Time, Logical Clock and its implementation, Limitations of Lamport’s Logical Clock, Vector Clock and its implementation, Matrix Clock, and other optimal clocks, Using Induction to prove properties of Clocks, Verifying Clock Algorithms, Events, Process States, Clock Skew and Clock Drift, Synchronizing Physical Clocks, Cristian’s Method, The Berkeley Algorithm, The Network Time Protocol, Distributed Debugging.nnnSynchronization Problems, Mutual exclusion, Shared memory algorithms, Peterson andLamport’s Bakery Algorithm, Token passing algorithms, Suzuki-Kasami algorithm, Raymond’s algorithm, Message passing algorithms, Lamport’s algorithm, Ricart-Agrawala algorithm, Maekawa algorithm, Leader election, Garci-Molina Bully algorithm, Chang-Roberts unidirectional ring algorithm, Hirschberg-Sinclair bidirectional algorithm, Global States and Consistent Cuts, Chandi-n- Introduction, Examples, Distributed Systems versus Parallel Systems, Partial Orders, Models of Distributed Systems, Architectural Models, Fundamental Models, Interleaving Model, Happened Before Model, Potential Causality Model, Appropriate Model, Models Based on states, Deposet.n- Program correctness, Correctness criteria, Safety and Liveness properties, Correctness proofs, Predicate logic, Assertional reasoning, Well-Founded sets, Predicate Transformers.n- Concept of Logical Time, Logical Clock and its implementation, Limitations of Lamport’s Logical Clock, Vector Clock and its implementation, Matrix Clock, and other optimal clocks, Using Induction to prove properties of Clocks, Verifying Clock Algorithms, Events, Process States, Clock Skew and Clock Drift, Synchronizing Physical Clocks, Cristian’s Method, The Berkeley Algorithm, The Network Time Protocol, Distributed Debugging.n- Synchronization Problems, Mutual exclusion, Shared memory algorithms, Peterson andLamport’s Bakery Algorithm, Token passing algorithms, Suzuki-Kasami algorithm, Raymond’s algorithm, Message passing algorithms, Lamport’s algorithm, Ricart-Agrawala algorithm, Maekawa algorithm, Leader election, Garci-Molina Bully algorithm, Chang-Roberts unidirectional ring algorithm, Hirschberg-Sinclair bidirectional algorithm, Global States and Consistent Cuts, Chandi-nLamport and Lai-Yang Snapshot Algorithm, Global State Collection, Dijkstra-Scholten and other termination algorithms, Chandi-Misra-Hass and other deadlock detection algorithms.n- Fault tolerance, Agreement problems, Asynchronous Distributed Consensus, Impossibility(FLP) result and its proof, Consensus in Synchronous systems, Byzantine Generals Problem (BGP), Consensus with oral and signed messages, Failure detectors.n- Naming (Tanenbaum-Steen, Ch. 4), Transactions and Concurrency control (CDK, Ch. 12), Distributed Transaction (CDK, Ch. 13), Replication (CDK, Ch. 14)","books":"- Hwang and F.A.Briggs: Computer Architecture and Parallel Processing, McGraw Hill.n- Distributed Systems: Concepts and Design; G Colouris, J Dollimore, T Kindberg 3/e Pearson Ed. 2002. (CDK)n- Distributed Systems: Principles and Paradigm; Andrew S Tanenbaum, Maarten van Steen 3/e Pearson Ed. 2002.n- Elements of Distributed Computing, VK Garg, Wiley-Interscience Publishers, 2002.","course outcomes":"- Understand the modern concepts of computer architecture.n- Investigate modern design structures of Pipelined and Multiprocessors systems.n- Design new multiprocessors systems."}
