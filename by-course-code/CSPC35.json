{"course code":"CSPC35","course title":"Software Development using UML and Agile Methodology","number of credits":"4","prerequisites":"CSPC23","course type":"PC","branch":"cs","course learning objectives":"The objective of this course is to prepare students for software development using UML and agile methodology for object oriented analysis and design","course content":"- UML & Object-Oriented Modeling [1] [3]nAn Overview of UML, architecture, UML Modeling Concepts – system models & views, datatypes, classes, objects, event & messages, object-oriented modeling; Modeling Relations- association, aggregation composition, generalization, dependency and structural diagrams, Requirement Elicitation- introduction, concepts & activities[3].nObject oriented analysis design using diagrams such as use-case diagrams, class diagrams, sequence diagrams, collaboration diagrams, activity diagrams, object diagrams, interaction diagrams and statechart diagrams.nFundamentals of Agile [4]nThe Genesis of Agile, Introduction and background, Agile Manifesto and Principles, Overview of Scrum, Extreme Programming, Feature Driven development, Lean Software Development, Agile project management, Design and development practices in Agile projects, Test Driven Development, Continuous Integration, Refactoring, Pair Programming, Simple Design, User Stories, Agile Testing, Agile ToolsnAgile Scrum Framework [2]nIntroduction to Scrum, Project phases, Agile Estimation, Planning game, Product backlog, Sprint backlog, Iteration planning, User story definition, Characteristics and content of user stories, Acceptance tests and Verifying stories, Project velocity, Burn down chart, Sprint planning and retrospective, Daily scrum, Scrum roles – Product Owner, Scrum Master, Scrum Team, Scrum case study, Tools for Agile project managementnAgile Software Design and Development [2] [4]nAgile design practices, Role of design Principles including Single Responsibility Principle, Open Closed Principle, Liskov Substitution Principle, Interface Segregation Principles, Dependency Inversion Principle in Agile Design, Need and significance of Refactoring, Refactoring Techniques, Continuous Integration, Automated build tools, Version control","reference books":"- Bernd Bruegge, Allen H. Dutoit, Object-Oriented Software Engineering Using UML, Patterns and Java, Pearson, 3rd Edition, 2013.n- Ken Schawber, Mike Beedle, Agile Software Development with Scrum, Pearson, 2001.n- Grady Booch, James Rumbaugh, Ivar Jacobson, Unified Modeling Language User Guide, Addison Wesley, 2nd Edition, 2012.n- Robert C. Martin, Agile Software Development- Principles, Patterns and Practices, Prentice Hall, 2013.","course outcomes":"On completion of the course the student will be able to:n- Understand the concepts of Unified Modeling Language (UML) and UML diagrams during object oriented analysis and design.n- Software development and process control using agile and scrum methodology."}
